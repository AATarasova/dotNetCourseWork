// <auto-generated />
using System;
using Mailing.MailingDal;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Mailing.Migrations
{
    [DbContext(typeof(MailingDbContext))]
    partial class MailingDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MailingGeneratorDomain.Models.ControlEvent", b =>
                {
                    b.Property<int>("ControlEventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MailingId")
                        .HasColumnType("int");

                    b.Property<int>("MaxMark")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ControlEventId");

                    b.HasIndex("MailingId");

                    b.ToTable("ControlEvents");
                });

            modelBuilder.Entity("MailingGeneratorDomain.Models.Text", b =>
                {
                    b.Property<int>("TextId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("InfomationPart")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MailingId")
                        .HasColumnType("int");

                    b.Property<string>("RememberAboutDeadline")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TextId");

                    b.HasIndex("MailingId");

                    b.ToTable("Texts");
                });

            modelBuilder.Entity("MailingsGeneratorDomain.Models.Mailing", b =>
                {
                    b.Property<int>("MailingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FinishWorkControlEventId")
                        .HasColumnType("int");

                    b.Property<string>("HelloText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StartDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MailingId");

                    b.HasIndex("FinishWorkControlEventId");

                    b.ToTable("Mailings");
                });

            modelBuilder.Entity("MailingGeneratorDomain.Models.ControlEvent", b =>
                {
                    b.HasOne("MailingsGeneratorDomain.Models.Mailing", "Mail")
                        .WithMany("Works")
                        .HasForeignKey("MailingId");
                });

            modelBuilder.Entity("MailingGeneratorDomain.Models.Text", b =>
                {
                    b.HasOne("MailingsGeneratorDomain.Models.Mailing", "Mail")
                        .WithMany("MailText")
                        .HasForeignKey("MailingId");
                });

            modelBuilder.Entity("MailingsGeneratorDomain.Models.Mailing", b =>
                {
                    b.HasOne("MailingGeneratorDomain.Models.ControlEvent", "FinishWork")
                        .WithMany()
                        .HasForeignKey("FinishWorkControlEventId");
                });
#pragma warning restore 612, 618
        }
    }
}
